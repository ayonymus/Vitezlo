apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "org.szvsszke.vitezlo2018"
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 15
        versionName "1.1.4"
        multiDexEnabled false
    }

    buildTypes {

        debug {
            // you need to apply your own api key
            resValue "string", "google_maps_api_key", getEnvironmentVariable("MAPS_KEY")
        }
        release {
            resValue "string", "google_maps_api_key", getEnvironmentVariable("MAPS_KEY")
        }
    }

    lintOptions {
        abortOnError false
    }
}


ext {
    appcompat_version = '1.0.2'

    dagger_version = '2.23.2'

    kotlin_coroutines_version = '1.3.0-RC'

    // unit testing
    junit_version = '4.12'
    mockito_verion = '2.16.0'
    mockitoKotlinVersion = '2.0.0-RC2'

    // quality
    leak_version = '2.0-alpha-3'
    timber_version = '4.7.1'
}

dependencies {

    // dagger
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger:$dagger_version"

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "androidx.appcompat:appcompat:$appcompat_version"

    // maps
    implementation 'com.google.android.gms:play-services-maps:8.4.0'
    implementation 'com.google.maps.android:android-maps-utils:0.4.3'

    // tools
    api 'io.ticofab.androidgpxparser:parser:1.5.0'
    implementation 'net.danlew:android.joda:2.10.2'

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    // unit testing
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_verion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion"

    // quality
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leak_version"
    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation "androidx.arch.core:core-testing:2.0.1"
}

static def getEnvironmentVariable(key) {
    def value = System.getenv(key)
    if (value == null)
        throw new GradleException(String.format("Please set %s as environment variable", key))
    return String.format("\"%s\"", value)
}

