apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "org.szvsszke.vitezlo2018"
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 15
        versionName "1.1.4"
        multiDexEnabled false
    }

    buildTypes {

        debug {
            // you need to apply your own api key
            resValue "string", "google_maps_api_key", getEnvironmentVariable("MAPS_KEY")
        }
        release {
            resValue "string", "google_maps_api_key", getEnvironmentVariable("MAPS_KEY")
        }
    }

    lintOptions {
        abortOnError false
    }
}


ext {
    androidx_appcompat_version = '1.1.0'
    androidx_arch_version = '2.1.0'
    androidx_legacy_version = '1.0.0'
    androidx_lifecycle_version = '2.2.0'
    androidx_preference_version = '1.1.0'

    dagger_version = '2.23.2'

    kotlin_coroutines_version = '1.3.0-RC'

    // unit testing
    junit_version = '4.12'
    mockito_verion = '2.16.0'
    mockitoKotlinVersion = '2.0.0-RC2'

    // quality
    leak_version = '2.1'
    timber_version = '4.7.1'

    maps_version = '8.4.0'
    maps_utils_version = '0.4.3'

    parser_version = '1.5.0'
    jodatime_version = '2.10.3'
}

dependencies {

    // dagger
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger:$dagger_version"

    implementation "androidx.legacy:legacy-support-v4:$androidx_legacy_version"
    implementation "androidx.appcompat:appcompat:$androidx_appcompat_version"
    implementation "androidx.arch.core:core-testing:$androidx_arch_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$androidx_lifecycle_version"
    implementation "androidx.preference:preference:$androidx_preference_version"

    // maps
    implementation "com.google.android.gms:play-services-maps:$maps_version"
    implementation "com.google.maps.android:android-maps-utils:$maps_utils_version"

    // tools
    implementation "io.ticofab.androidgpxparser:parser:$parser_version"
    implementation "net.danlew:android.joda:$jodatime_version"

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    // unit testing
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_verion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion"

    // quality
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leak_version"
    implementation "com.jakewharton.timber:timber:$timber_version"
}

static def getEnvironmentVariable(key) {
    def value = System.getenv(key)
    if (value == null)
        throw new GradleException(String.format("Please set %s as environment variable", key))
    return String.format("\"%s\"", value)
}

